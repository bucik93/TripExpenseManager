@using System.ComponentModel
@inherits LayoutComponentBase

@implements IDisposable
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject MauiInterop MauiInterop


  

<div class="w-100 position-fixed p-3 mb-3 bg-black shaddow-sm top-navbar">
    <div class="hstack gap-3">
        <h3 class="m-0 w-100 @(MauiInterop.IsIOS ? "text-center" : "text-start")">
            @AppState.PageTitle
        </h3>
        @*   <i class="bx bx-user-circle bx-sm text-white"></i> *@
        @if(AppState.TabBarItems.Length > 0)
        {
        <label>
            @foreach (var tabBarItem in AppState.TabBarItems)
            {
                <i class="bx text-white @tabBarItem.Icon" @onclick="@tabBarItem.OnTap"/>
            }
        </label>
      @*       <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" onchange="@OnCheckBoxChange">
                <label class="form-check-label" for="flexSwitchCheckDefault">Dark mode</label>
            </div> *@
        }
    </div>
</div>

<div class="body-content">
    @Body
</div>

<div class="d-flex justify-content-center w-100">
    <div class="d-flex justify-content-between align-items-center vw-90 p-2 mx-1 my-2 bg-dark bg-gradient position-fixed tabbar-rounded shadow-lg bottom-tabbar">
        <label class="rounded-pill px-3 py-1 m-0 text-white d-flex flex-column align-items-center
        @(IsHomeSelected ? "shadow-lg" : "light-white")"
               onclick="@(() => GoToPage(AppConstants.MenuItems.Home))">
            <i class="bx @(IsHomeSelected ? "bxs-home" : "bx-home") bx-md"></i>
            <span class="fs-12">Home</span>
        </label>
        <label class="rounded-pill px-3 py-1 m-0 text-white d-flex flex-column align-items-center
        @(IsTripSelected ? "shadow-lg" : "light-white")"
               onclick="@(() => GoToPage(AppConstants.MenuItems.Trips))">
            <i class="bx @(IsTripSelected ? "bxs-food-menu" : "bx-food-menu") bx-md"></i>
            <span class="fs-12">Trips</span>
        </label>
        <label class="rounded-pill px-3 py-1 light-white m-0 d-flex flex-column align-items-center" onclick="@(() => GoToInnerPage("/trips/add"))">
            <i class="bx bx-plus-circle bx-md"></i>
            <span class="fs-12">Add</span>
        </label>
        <label class="rounded-pill px-3 py-1 m-0 text-white d-flex flex-column align-items-center
        @(IsSettingsSelected ? "shadow-lg" : "light-white")"
               onclick="@(() => GoToPage(AppConstants.MenuItems.Settings))">
            <i class="bx @(IsSettingsSelected ? "bxs-cog" : "bx-cog") bx-md"></i>
            <span class="fs-12">Settings</span>
        </label>

    </div>
</div>

@code {

    // private bool IsDarkMood = false;

    // private async void OnCheckBoxChange(ChangeEventArgs e)
    // {
    //     if (e.Value != null)
    //     {
    //         IsDarkMood = (bool)e.Value;
    //         var newPassword = await MauiInterop.ShowProptAsync($"{IsDarkMood} czy to jest", "Enter new password", "Save New Password", string.Empty);

    //     }
    // }
    private static IDictionary<string, string> _pagesMap = new Dictionary<string, string>()
        {
            [AppConstants.MenuItems.Home] = "/",
            [AppConstants.MenuItems.Trips] = "/trips",
            [AppConstants.MenuItems.Settings] = "/settings",
        };

    private bool IsHomeSelected => AppState.SelectedMenuItem == AppConstants.MenuItems.Home;
    private bool IsTripSelected => AppState.SelectedMenuItem == AppConstants.MenuItems.Trips;
    private bool IsSettingsSelected => AppState.SelectedMenuItem == AppConstants.MenuItems.Settings;

    protected override void OnInitialized()
    {
        AppState.PropertyChanged += OnAppStatePropertyChanged;
    }

    private void OnAppStatePropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AppState.SelectedMenuItem) || e.PropertyName == nameof(AppState.TabBarItems))
        {
            StateHasChanged();
        }

    }

    private void GoToPage(string pageName)
    {
        NavigationManager.NavigateTo(_pagesMap[pageName], replace: true);
    }

    private void GoToInnerPage(string url)
    {
        NavigationManager.GoToInnerPage(url);
    }

    public void Dispose()
    {
        AppState.PropertyChanged -= OnAppStatePropertyChanged;
    }
}