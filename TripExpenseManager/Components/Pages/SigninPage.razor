@page "/signin"
@layout AuthLayout

@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject MauiInterop MauiInterop

<EditForm Model="_model" OnValidSubmit="SignInAsync">
    <DataAnnotationsValidator/>
    <div class="card border-0 shadow-sm">
       <div class="card-body text-center">
           <h4>Welcome back</h4>
           <p class="text-muted">Sign-in to your Tripex Account</p>
           <div class="vstack text-start">
               <div class="mb-3">
                   <label class="form-label">UserName</label>
                   <InputText @bind-Value="_model.UserName" placeholder="Enter User Name" class="form-control rounded-pill fs-6"></InputText>
                   <ValidationMessage For="()=> _model.UserName"/>
               </div>
                  <div class="mb-3">
                   <label class="form-label">Password</label>
                   <InputText @bind-Value="_model.Password" placeholder="Enter password" typeof="password" class="form-control rounded-pill fs-6"></InputText>
                   <ValidationMessage For="()=> _model.Password"/>
               </div>
               <button type="submit" class="btn btn-primary rounded-pill">SignIn</button>
           </div>
       </div>

    </div>
</EditForm>

<p class="text-end mt-3">New to Tripex? <NavLink href="/signup">Create Account</NavLink></p>


@code {
    private SignInModel _model = new();

    private async Task SignInAsync()
    {
        MauiInterop.ShowLoader();

        try
        {
            await Task.Delay(5000);
            var result = await AuthService.SignInAsync(_model);
            if (result.IsSuccess)
            {
                NavigationManager.NavigateTo("/home", replace:true);
            }
            else
            {
                await MauiInterop.ShowErrorAlertAsync(result.Error ?? "Error in signing in");
            }
        }
        catch (Exception ex)
        {
            await MauiInterop.ShowErrorAlertAsync(ex.Message);            
        }
        finally
        {
            MauiInterop.HideLoader();
        }
    }

}
