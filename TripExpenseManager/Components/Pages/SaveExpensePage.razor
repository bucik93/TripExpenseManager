@page "/trips/{tripId:int}/expenses/add"
@page "/trips/{tripId:int}/expenses/{expenseId:long}/edit"

@layout InnerPagesLayout

@inject TripsService TripsService
@inject NavigationManager NavigationManager
@inject MauiInterop MauiInterop
@inject DropDownsService DropDownsService
@inject AppState AppState

<style type="text/css" scoped>
    .img-container {
        /* background-image: url('images/money.png'); */
         background-color: dodgerblue; 
        background-position-y: -100px;
        height: 250px;
    }

    .category-img {
        width: 25px;
        height: 25px;
    }

    .category-label {
        font-size: 12px;
    }
</style>


<div class="img-container m-0 p-0 vw-100"></div>

<EditForm Model="_model" OnValidSubmit="SaveExpenseAsync">
    <DataAnnotationsValidator />
    <FormContent Heading="@_title" ButtonText="Save Expense">
        <div class="mb-3">
            <label class="form-label">For what</label>
            <InputText @bind-Value="_model.For" class="form-control rounded-pill fs-6" placeholder="For what" />
            <ValidationMessage For="() => _model.For" />
        </div>
        <div class="mb-3">
            <label class="form-label">How much</label>
            <InputNumber @bind-Value="_model.Amount" class="form-control rounded-pill fs-6" placeholder="How much" />
            <ValidationMessage For="() => _model.Amount" />
        </div>
        <div class="mb-3">
            <label class="form-label">Category</label>
            <InputSelect @bind-Value="_model.Category" class="form-control rounded-pill fs-6" placeholder="Category" >
                <option value="">Choose Category</option>
                @foreach (var category in _exprensCategories)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
            <ValidationMessage For="() => _model.Category" />
        </div>
        <div class="mb-3">
            <label class="form-label">When</label>
            <InputDate @bind-Value="_model.SpentOn" class="form-control rounded-pill fs-6" placeholder="Spent when" />
            <ValidationMessage For="() => _model.SpentOn" />
        </div>
    </FormContent>
</EditForm>


@code {
    [Parameter]
    public int TripId { get; set; }

    [Parameter]
    public long? ExpenseId { get; set; }

    Expense _model = new();

    private string[] _exprensCategories = Array.Empty<string>();

    private string _title = "Add Expense";

    protected override async Task OnInitializedAsync()
    {
        AppState.NoTabBarItems();
        MauiInterop.ShowLoader();

        _exprensCategories = await DropDownsService.GetExpenseCategoriesAsync();
        if(ExpenseId.HasValue && ExpenseId > 0)
        {
            _title = "Add Expense";
            _model = await TripsService.GetExpenseAsync(ExpenseId.Value);
        }
        AppState.SetInnerPageTitle(_title);

        MauiInterop.HideLoader();
        _model.TripId = TripId;

    }


    private async Task SaveExpenseAsync()
    {
        MauiInterop.ShowLoader();
        try
        {
            var result = await TripsService.SaveExpenseAsync(_model);
            if (result.IsSuccess)
            {
                await MauiInterop.ShowToastAsync("Expense saved");
                NavigationManager.GoBack();
            }
            else
            {
                await MauiInterop.ShowSuccesAlertAsync(result.Error ?? "Error while saving expense");
            }
        }
        catch (Exception ex)
        {
            await MauiInterop.ShowSuccesAlertAsync(ex.Message);
        }
        finally
        {
            MauiInterop.HideLoader();
        }
    }

}

